#include <iostream>

// 메모리 영역
// 1. 스택 영역 -> 함수나 그 함수에 포함된 지역변수들의 공간
// 2. 데이터 영역 -> 함수에 종속되지 않은 변수들의 공간, 프로그램 실행 시 만들어짐, 프로그램 종료 시 사라짐
// 3. 읽기 전용(코드, ROM)
// 4. 힙 영역 -> 포인터, 동적할당 시 사용

//정적 변수(static)
//데이터 영역 사용
static int g_iStatic = 0;
//전역변수와의 차이점 -> 서로 다른 파일에 두번 선언될 경우 정적변수는 에러x
//선언되는 위치에 따라 동작의 차이가 있음
//static으로 선언된 변수는 그 위치에만 존재함 -> 한 파일의 전역공간, 코드블럭 내 등 -> 다른 공간에서 찾을 수 없음
//전역공간에 선언된 경우 cpp파일의 전역변수 처럼 동작함 또한, 네이밍 규칙에 영향을 받지 않음
//헤더에 static 선언된 경우, 각 파일에서 그 변수의 이름만 가져다 쓰는 것이고, 실제 값은 각자 다름

void Test()
{
    int a = 0;

    static int i = 0; // <- 함수가 호출될 때 마다 0으로 초기화하지 않음
    //i는 Test함수 내에 고정적으로 위치함
    //Test함수가 호출될 때, a는 Test내에 존재하지만 i는 데이터 영역에 따로 먼저 존재함
    //이 함수에서만 접근 가능한 데이터 영역 변수를 만들겠다는 의미가 됨.
}

//외부 변수(extern)
//데이터 영역 사용
//다른 파일도 통합적으로 사용되는 전역변수
//헤더에 extern 변수를 사용할 때, 값을 초기화하면 안됨 -> 값을 선언한 것이 아닌, 변수의 존재를 알려주는 역할임
//하지만 다른 파일에서 선언해주지 않을 경우, 없는 값으로 인식하게 됨




//전역변수 -> 데이터 영역 사용
int Global = 0;
//함수 밖에 선언된 변수들

//함수
int Add(int left, int right)
{
    //int 함수는 int타입의 데이터를 반드시 반환해야 한다.
    return left + right;
}

//메인 '함수'
int main()
{
    //지역변수
    int local = 1;
    //함수 내 코드블럭에 존재하는 변수들

    //지역과 전역은 함수에 포함되어있느냐 아니냐로 구분함

    //함수란?(Function) -> 특정 기능을 가진 것
    //모듈화를 통해 기능마다 함수로 나눠야 함 -> 새로운 기능 추가, 수정에 용이함

    //Add는 int데이터를 반환하기 때문에 int 변수의 초기화에 사용 가능
    int data = Add(10,20);

    int iName = 0;

    //지역 안의 새로운 지역
    {
        //변수명 규칙
        int iName = 100; 
        //두 변수 이름이 같을 때,컴파일러는 블럭 내에 존재하는 변수를 우선으로 생각함
        //만약 같은 블럭 내에서 두번 선언되면 컴파일 에러
        iName; //100의 값을 가진 iName이 불려짐
    }

    iName; //0의 값을 가진 iName이 불려짐

    //정적변수
    //외부변수(헤더파일 분할 구현)

    return 0;
}